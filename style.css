/* ================================================================== */
/* ============= CORPORATE ELEGANCE THEME - V6 FINAL ============== */
/* ================================================================== */

:root {
    --amc-green: #49763a;
    --amc-orange: #e15423;
    --amc-orange-dark: #c34114;
    
    --bg-light: #f4f7fc;
    --card-bg: #ffffff;
    
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --text-light: #f8fafc;
    
    --border-color: #e2e8f0;
    --accent-blue: #3b82f6;
    
    --font-en: 'Poppins', sans-serif;
    --font-ar: 'Cairo', sans-serif;
    
    --shadow-md: 0 4px 10px rgba(30, 41, 59, 0.05);
    --shadow-lg: 0 10px 30px rgba(30, 41, 59, 0.1);
}

* { margin: 0; padding: 0; box-sizing: border-box; }
html { scroll-behavior: smooth; }

body {
    font-family: var(--font-en);
    background-color: var(--bg-light);
    color: var(--text-primary);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 2rem;
}

.app-container {
    width: 100%;
    max-width: 700px;
    background: var(--card-bg);
    border-radius: 24px;
    padding: 3rem;
    box-shadow: var(--shadow-lg);
    animation: fadeInScaleUp 1s cubic-bezier(0.16, 1, 0.3, 1);
}
@keyframes fadeInScaleUp { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }

.app-header { text-align: center; margin-bottom: 2rem; }
.logo { height: 80px; margin-bottom: 1rem; }

.title-container h1 { font-size: 2.2rem; }
.title-container p { color: var(--text-secondary); }

.selection-container, .workspace {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.workspace { display: none; } /* Workspaces are hidden by default */

.action-buttons-container {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-top: 2rem;
}
.action-btn {
    padding: 1.5rem;
    border-radius: 16px;
    border: 1px solid var(--border-color);
    background: var(--text-light);
    color: var(--text-primary);
    cursor: pointer;
    text-align: center;
    transition: all 0.3s ease;
}
.action-btn:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
    border-color: var(--amc-orange);
}
.btn-icon {
    width: 50px;
    height: 50px;
    margin: 0 auto 1rem auto;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}
.document-icon { background: var(--amc-green); }
.instant-icon { background: var(--amc-orange); }
.btn-icon svg { width: 28px; height: 28px; }
.btn-text h3 { font-size: 1.1rem; }

.back-btn {
    align-self: flex-start;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: transparent;
    border: none;
    color: var(--text-secondary);
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    margin-bottom: 1.5rem;
}
.back-btn svg { width: 20px; height: 20px; }

.workspace-title { margin-bottom: 2rem; text-align: center; }

.translation-form { width: 100%; display: flex; flex-direction: column; gap: 1.5rem; }
.language-selectors { display: flex; gap: 1rem; }
select {
    flex: 1;
    font-size: 1rem;
    padding: 0.8rem 1rem;
    background: var(--text-light);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
}

.upload-area {
    border: 2px dashed var(--border-color);
    border-radius: 12px;
    padding: 2rem;
    transition: all 0.3s ease;
}
.upload-area.dragover {
    border-color: var(--amc-orange);
    background-color: #fff8f5;
}
.upload-label { cursor: pointer; display: flex; flex-direction: column; align-items: center; gap: 1rem; }
.upload-icon-wrapper { color: var(--text-secondary); }
.upload-text b { color: var(--text-primary); }

@keyframes shimmer-wipe {
    0% { transform: translateX(-150%) skewX(-30deg); }
    100% { transform: translateX(300%) skewX(-30deg); }
}
.progress-container { width: 100%; }
.progress-info { display: flex; justify-content: space-between; margin-bottom: 0.5rem; font-size: 0.9rem; }
.progress-bar-background {
    height: 16px;
    background: var(--border-color);
    border-radius: 16px;
    overflow: hidden;
    position: relative;
}
.progress-bar {
    width: 0%;
    height: 100%;
    background: linear-gradient(90deg, #4ade80, var(--amc-green));
    border-radius: 16px;
    transition: width 0.5s cubic-bezier(0.25, 1, 0.5, 1);
    position: relative;
    overflow: hidden;
}
.progress-bar::after {
    content: ''; position: absolute; top: 0; left: 0;
    width: 30%; height: 100%;
    background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.4) 50%, rgba(255,255,255,0) 100%);
    animation: shimmer-wipe 1.8s infinite linear;
}

.submit-btn {
    background: linear-gradient(45deg, var(--amc-orange), var(--amc-orange-dark));
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(225, 84, 35, 0.3);
}
.submit-btn:hover { transform: translateY(-3px); box-shadow: 0 6px 20px rgba(225, 84, 35, 0.4); }

.text-areas { display: flex; gap: 1rem; }
textarea {
    flex: 1;
    height: 200px;
    padding: 1rem;
    background: var(--text-light);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    resize: none;
}
#copy-btn {
    position: absolute; bottom: 1rem; right: 1rem;
    width: 40px; height: 40px; border-radius: 8px;
    background: #fff; border: 1px solid var(--border-color);
    cursor: pointer;
}

.app-footer { text-align: center; margin-top: 2rem; color: var(--text-secondary); font-size: 0.9rem; }

@media (max-width: 768px) {
    body { padding: 1rem; align-items: flex-start; }
    .app-container { padding: 1.5rem; }
    .action-buttons-container { grid-template-columns: 1fr; }
    .language-selectors, .text-areas { flex-direction: column; }
}```

#### الملف الثالث: `script.js` (لإدارة الواجهة الجديدة)

```javascript
// Global variables for UI state
const selectionScreen = document.getElementById('selection-screen');
const fileWorkspace = document.getElementById('file-translation');
const textWorkspace = document.getElementById('text-translation');

function openWorkspace(workspaceId) {
    selectionScreen.style.display = 'none';
    if (workspaceId === 'file-translation') {
        fileWorkspace.style.display = 'flex';
        textWorkspace.style.display = 'none';
    } else {
        fileWorkspace.style.display = 'none';
        textWorkspace.style.display = 'flex';
    }
}

function showSelectionScreen() {
    fileWorkspace.style.display = 'none';
    textWorkspace.style.display = 'none';
    selectionScreen.style.display = 'flex';
}

// --- The rest of your script.js remains the same ---
// Just make sure to add the code above at the top of your script.js file.
// The provided code below is the full file for convenience.

document.addEventListener('DOMContentLoaded', () => {
    // --- UI State Management ---
    const selectionScreen = document.getElementById('selection-screen');
    const fileWorkspace = document.getElementById('file-translation');
    const textWorkspace = document.getElementById('text-translation');

    window.openWorkspace = (workspaceId) => {
        selectionScreen.style.display = 'none';
        if (workspaceId === 'file-translation') {
            fileWorkspace.style.display = 'flex';
            textWorkspace.style.display = 'none';
        } else {
            fileWorkspace.style.display = 'none';
            textWorkspace.style.display = 'flex';
        }
    };

    window.showSelectionScreen = () => {
        fileWorkspace.style.display = 'none';
        textWorkspace.style.display = 'none';
        selectionScreen.style.display = 'flex';
    };
    // --- End of UI State Management ---


    const FILE_TRANSLATE_URL = '/translate-file';
    const TEXT_TRANSLATE_URL = '/translate-text';

    const fileForm = document.getElementById('file-upload-form');
    const fileInput = document.getElementById('file-input');
    const fileNameDisplay = document.getElementById('file-name-display');
    const uploadArea = document.getElementById('upload-area');
    const translateFileBtn = document.getElementById('translate-file-btn');
    const dynamicUploadIcon = document.getElementById('dynamic-upload-icon');
    
    const progressContainer = document.getElementById('progress-container');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    const timeEstimate = document.getElementById('time-estimate');

    const sourceTextArea = document.getElementById('source-text');
    const targetTextArea = document.getElementById('target-text');
    const copyBtn = document.getElementById('copy-btn');
    
    let progressInterval = null;

    const languages = {
        'Arabic': 'ar', 'English': 'en', 'French': 'fr', 'German': 'de', 'Spanish': 'es', 
        'Italian': 'it', 'Portuguese': 'pt', 'Dutch': 'nl', 'Russian': 'ru', 'Turkish': 'tr',
        'Japanese': 'ja', 'Korean': 'ko', 'Chinese (Simplified)': 'zh-CN', 'Hindi': 'hi',
        'Indonesian': 'id', 'Polish': 'pl', 'Swedish': 'sv', 'Vietnamese': 'vi'
    };
    
    function populateLanguageSelectors() {
        const selectors = document.querySelectorAll('select');
        selectors.forEach(selector => {
            const isSource = selector.id.includes('source');
            selector.innerHTML = isSource ? '<option value="auto">Auto-Detect</option>' : '';
            for (const name in languages) { 
                const option = new Option(name, name);
                selector.add(option);
            }
        });
        document.getElementById('file-target-lang').value = 'Arabic';
        document.getElementById('text-target-lang').value = 'Arabic';
    }
    
    function startProgressSimulation(fileSize) {
        const estimatedDuration = 15 + (fileSize / 1024 / 1024) * 20; // Adjusted timing
        let progress = 0;
        let elapsed = 0;

        progressContainer.style.display = 'block';
        progressBar.style.width = '0%';
        progressBar.style.background = '';
        progressText.textContent = `Processing... 0%`;
        timeEstimate.textContent = `~${Math.round(estimatedDuration)}s remaining`;

        progressInterval = setInterval(() => {
            elapsed++;
            progress = Math.min(95, (elapsed / estimatedDuration) * 100);
            
            progressBar.style.width = `${progress.toFixed(2)}%`;
            progressText.textContent = `Processing... ${Math.round(progress)}%`;

            const remaining = Math.round(estimatedDuration - elapsed);
            if (remaining > 0) {
                timeEstimate.textContent = `~${remaining}s remaining`;
            } else {
                timeEstimate.textContent = 'Finalizing...';
            }

            if (progress >= 95) {
                clearInterval(progressInterval);
            }
        }, 1000);
    }

    function completeProgress() {
        clearInterval(progressInterval);
        progressBar.style.width = '100%';
        progressBar.style.background = 'var(--accent-green)';
        progressText.textContent = 'Success! 100%';
        timeEstimate.textContent = 'Download starting...';
    }
    
    function failProgress(errorMessage) {
        clearInterval(progressInterval);
        progressBar.style.background = 'var(--amc-orange)';
        progressText.textContent = `Error: ${errorMessage}`;
        timeEstimate.textContent = 'Please try again.';
    }
    
    function resetFileUI() {
        fileInput.value = ''; 
        const enText = fileNameDisplay.querySelector('.en b');
        const arText = fileNameDisplay.querySelector('.ar b');
        if(enText) enText.textContent = 'Click to upload';
        if(arText) arText.textContent = 'انقر للرفع';
        
        // Hide progress bar after a delay
        setTimeout(() => {
            progressContainer.style.display = 'none';
        }, 5000);
    }

    async function handleFileSubmit(e) {
        e.preventDefault();
        if (fileInput.files.length === 0) {
            alert('Please select a file first.');
            return;
        }

        const file = fileInput.files[0];
        const formData = new FormData(fileForm);
        translateFileBtn.disabled = true;

        startProgressSimulation(file.size);

        try {
            const response = await fetch(FILE_TRANSLATE_URL, { method: 'POST', body: formData });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            completeProgress();
            const blob = await response.blob();
            const downloadUrl = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = downloadUrl;
            a.download = `translated_${file.name}.docx`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(downloadUrl);
        } catch (error) {
            failProgress(error.message);
        } finally {
            translateFileBtn.disabled = false;
            resetFileUI();
        }
    }
    
    async function handleTextTranslation() {
        const text = sourceTextArea.value.trim();
        if (!text) return;
        targetTextArea.placeholder = "Translating...";
        try {
            const response = await fetch(TEXT_TRANSLATE_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    text: text,
                    source_lang: document.getElementById('text-source-lang').value,
                    target_lang: document.getElementById('text-target-lang').value
                })
            });
            const data = await response.json();
            if (!response.ok) throw new Error(data.error);
            targetTextArea.value = data.translated_text;
        } catch (error) {
            targetTextArea.value = `Error: ${error.message}`;
        }
    }

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const enText = fileNameDisplay.querySelector('.en b');
            const arText = fileNameDisplay.querySelector('.ar b');
            if(enText) enText.textContent = file.name;
            if(arText) arText.textContent = '';
            progressContainer.style.display = 'none';
        }
    });

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eName => uploadArea.addEventListener(eName, e => { e.preventDefault(); e.stopPropagation(); }));
    ['dragenter', 'dragover'].forEach(eName => uploadArea.addEventListener(eName, () => uploadArea.classList.add('dragover')));
    ['dragleave', 'drop'].forEach(eName => uploadArea.addEventListener(eName, () => uploadArea.classList.remove('dragover')));
    uploadArea.addEventListener('drop', e => {
        fileInput.files = e.dataTransfer.files;
        fileInput.dispatchEvent(new Event('change'));
    });

    fileForm.addEventListener('submit', handleFileSubmit);
    let debounceTimer;
    sourceTextArea.addEventListener('input', () => { clearTimeout(debounceTimer); debounceTimer = setTimeout(handleTextTranslation, 500); });
    copyBtn.addEventListener('click', () => { navigator.clipboard.writeText(targetTextArea.value); });
    
    populateLanguageSelectors();
    
    // Set initial state to show selection screen
    showSelectionScreen();
});
